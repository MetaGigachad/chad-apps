apiVersion: v1
kind: Service
metadata:
  name: training-postgres
spec:
  selector:
    app: training-postgres
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: training-postgres
spec:
  selector:
    matchLabels:
      app: training-postgres
  template:
    metadata:
      labels:
        app: training-postgres
    spec:
      containers:
      - name: training-postgres
        image: postgres:latest
        ports:
        - containerPort: 5432
        env:
          - name: POSTGRES_USER
            value: admin
          - name: POSTGRES_PASSWORD
            value: {{ $.Values.training.postgres.passwords.admin }}
          - name: POSTGRES_DB
            value: admin
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: training-postgres-data
          - mountPath: /docker-entrypoint-initdb.d
            name: init
      volumes:
      - name: training-postgres-data
        persistentVolumeClaim:
          claimName: training-postgres-pvc
      - name: init
        configMap:
          name: training-postgres-init
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: training-postgres-init
data:
  init.sh: |
    #!/bin/bash
    set -e

    sql() {
        psql -U admin -d "$1"
    }

    export PGPASSWORD='{{ $.Values.training.postgres.passwords.admin }}'

    sql admin <<EOF
        CREATE DATABASE service;
        CREATE USER service 
          WITH ENCRYPTED PASSWORD '{{ $.Values.training.postgres.passwords.service }}';
        GRANT ALL PRIVILEGES ON DATABASE service TO service;
    EOF

    sql service <<EOF
        GRANT USAGE, CREATE ON SCHEMA public TO service;
        GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO service;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public 
          GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO service;
    EOF
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: training-postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: training-service-migration-files
data:
  1_initial.up.sql: |
    CREATE TYPE MUSCLE_GROUP AS ENUM (
      'chest',
      'back',
      'abs',
      'shoulders',
      'biceps',
      'triceps',
      'forearms',
      'quadriceps',
      'hamstrings',
      'calves'
    );

    CREATE SCHEMA service;

    CREATE TABLE service.users (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      oauth2_id VARCHAR(255) NOT NULL UNIQUE,
      name VARCHAR(255) NOT NULL
    );

    CREATE TABLE service.exercises (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(255) NOT NULL,
      body_weight BOOLEAN NOT NULL,
      muscle_groups MUSCLE_GROUP[] NOT NULL,
      owner_id UUID NOT NULL, 
      deleted BOOLEAN NOT NULL DEFAULT FALSE,
      FOREIGN KEY (owner_id) REFERENCES service.users(id)
    );

    CREATE TABLE service.workouts (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      name VARCHAR(255) NOT NULL,
      edited_at BIGINT NOT NULL,
      muscle_groups MUSCLE_GROUP[] NOT NULL,
      owner_id UUID NOT NULL,
      FOREIGN KEY (owner_id) REFERENCES service.users(id)
    );
    CREATE TABLE service.workout_exercises (
      workout_id UUID NOT NULL,
      exercise_id UUID NOT NULL,
      order_id INT NOT NULL,
      rep_range INT[] NOT NULL, -- Array of two numbers for the rep range
      sets INT NOT NULL,
      PRIMARY KEY (workout_id, order_id),
      FOREIGN KEY (workout_id) REFERENCES service.workouts(id) ON DELETE CASCADE,
      FOREIGN KEY (exercise_id) REFERENCES service.exercises(id)
    );

    CREATE TABLE service.workout_logs (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      started_at BIGINT NOT NULL,
      ended_at BIGINT NOT NULL,
      muscle_groups MUSCLE_GROUP[] NOT NULL,
      base_workout_id UUID NOT NULL,
      owner_id UUID NOT NULL,
      FOREIGN KEY (owner_id) REFERENCES service.users(id),
      FOREIGN KEY (base_workout_id) REFERENCES service.workouts(id)
    );
    CREATE TABLE service.workout_log_exercises (
      log_id UUID NOT NULL,
      exercise_id UUID NOT NULL,
      order_id INT NOT NULL,
      reps INT NOT NULL,
      weight DOUBLE PRECISION NOT NULL,
      started_at BIGINT NOT NULL,
      ended_at BIGINT NOT NULL,
      PRIMARY KEY (log_id, order_id),
      FOREIGN KEY (log_id) REFERENCES service.workout_logs(id) ON DELETE CASCADE,
      FOREIGN KEY (exercise_id) REFERENCES service.exercises(id)
    );
  1_initial.down.sql: |
    DROP TABLE service.workout_log_exercises;
    DROP TABLE service.workout_logs;

    DROP TABLE service.workout_exercises;
    DROP TABLE service.workouts;

    DROP TABLE service.exercises;

    DROP TABLE service.users;

    DROP SCHEMA service CASCADE;

    DROP TYPE MUSCLE_GROUP;
