/* tslint:disable */
/* eslint-disable */
/**
 * Training service
 * Backend for training app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Exercise,
  ExerciseBody,
  ExerciseRef,
  GetConfigResponse,
  PostWorkoutLogRequest,
  PostWorkoutRequest,
  PutWorkoutRequest,
  PutWorkoutResponse,
  Workout,
  WorkoutDescription,
  WorkoutLog,
  WorkoutLogDescription,
} from '../models/index';
import {
    ExerciseFromJSON,
    ExerciseToJSON,
    ExerciseBodyFromJSON,
    ExerciseBodyToJSON,
    ExerciseRefFromJSON,
    ExerciseRefToJSON,
    GetConfigResponseFromJSON,
    GetConfigResponseToJSON,
    PostWorkoutLogRequestFromJSON,
    PostWorkoutLogRequestToJSON,
    PostWorkoutRequestFromJSON,
    PostWorkoutRequestToJSON,
    PutWorkoutRequestFromJSON,
    PutWorkoutRequestToJSON,
    PutWorkoutResponseFromJSON,
    PutWorkoutResponseToJSON,
    WorkoutFromJSON,
    WorkoutToJSON,
    WorkoutDescriptionFromJSON,
    WorkoutDescriptionToJSON,
    WorkoutLogFromJSON,
    WorkoutLogToJSON,
    WorkoutLogDescriptionFromJSON,
    WorkoutLogDescriptionToJSON,
} from '../models/index';

export interface DeleteExerciseRequest {
    id: string;
}

export interface DeleteWorkoutRequest {
    id: string;
}

export interface DeleteWorkoutLogRequest {
    id: string;
}

export interface GetWorkoutRequest {
    id: string;
}

export interface GetWorkoutLogRequest {
    id: string;
}

export interface PostExerciseRequest {
    exerciseBody: ExerciseBody;
}

export interface PostWorkoutOperationRequest {
    postWorkoutRequest: PostWorkoutRequest;
}

export interface PostWorkoutLogOperationRequest {
    postWorkoutLogRequest: PostWorkoutLogRequest;
}

export interface PutWorkoutOperationRequest {
    id: string;
    putWorkoutRequest: PutWorkoutRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async deleteExerciseRaw(requestParameters: DeleteExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteExercise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteExercise(requestParameters: DeleteExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteExerciseRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWorkoutRaw(requestParameters: DeleteWorkoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workout/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWorkout(requestParameters: DeleteWorkoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkoutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWorkoutLogRaw(requestParameters: DeleteWorkoutLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkoutLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workoutLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWorkoutLog(requestParameters: DeleteWorkoutLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkoutLogRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetConfigResponseFromJSON(jsonValue));
    }

    /**
     */
    async getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetConfigResponse> {
        const response = await this.getConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getExercisesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Exercise>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercises`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExerciseFromJSON));
    }

    /**
     */
    async getExercises(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Exercise>> {
        const response = await this.getExercisesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkoutRaw(requestParameters: GetWorkoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workout>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workout/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkoutFromJSON(jsonValue));
    }

    /**
     */
    async getWorkout(requestParameters: GetWorkoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workout> {
        const response = await this.getWorkoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkoutLogRaw(requestParameters: GetWorkoutLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkoutLog>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkoutLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workoutLog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkoutLogFromJSON(jsonValue));
    }

    /**
     */
    async getWorkoutLog(requestParameters: GetWorkoutLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkoutLog> {
        const response = await this.getWorkoutLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkoutLogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkoutLogDescription>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workoutLogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkoutLogDescriptionFromJSON));
    }

    /**
     */
    async getWorkoutLogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkoutLogDescription>> {
        const response = await this.getWorkoutLogsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getWorkoutsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkoutDescription>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkoutDescriptionFromJSON));
    }

    /**
     */
    async getWorkouts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkoutDescription>> {
        const response = await this.getWorkoutsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postExerciseRaw(requestParameters: PostExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExerciseRef>> {
        if (requestParameters['exerciseBody'] == null) {
            throw new runtime.RequiredError(
                'exerciseBody',
                'Required parameter "exerciseBody" was null or undefined when calling postExercise().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exercise`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExerciseBodyToJSON(requestParameters['exerciseBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseRefFromJSON(jsonValue));
    }

    /**
     */
    async postExercise(requestParameters: PostExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExerciseRef> {
        const response = await this.postExerciseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postWorkoutRaw(requestParameters: PostWorkoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workout>> {
        if (requestParameters['postWorkoutRequest'] == null) {
            throw new runtime.RequiredError(
                'postWorkoutRequest',
                'Required parameter "postWorkoutRequest" was null or undefined when calling postWorkout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostWorkoutRequestToJSON(requestParameters['postWorkoutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkoutFromJSON(jsonValue));
    }

    /**
     */
    async postWorkout(requestParameters: PostWorkoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workout> {
        const response = await this.postWorkoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postWorkoutLogRaw(requestParameters: PostWorkoutLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postWorkoutLogRequest'] == null) {
            throw new runtime.RequiredError(
                'postWorkoutLogRequest',
                'Required parameter "postWorkoutLogRequest" was null or undefined when calling postWorkoutLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workoutLog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostWorkoutLogRequestToJSON(requestParameters['postWorkoutLogRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postWorkoutLog(requestParameters: PostWorkoutLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postWorkoutLogRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putWorkoutRaw(requestParameters: PutWorkoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutWorkoutResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putWorkout().'
            );
        }

        if (requestParameters['putWorkoutRequest'] == null) {
            throw new runtime.RequiredError(
                'putWorkoutRequest',
                'Required parameter "putWorkoutRequest" was null or undefined when calling putWorkout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/workout/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutWorkoutRequestToJSON(requestParameters['putWorkoutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutWorkoutResponseFromJSON(jsonValue));
    }

    /**
     */
    async putWorkout(requestParameters: PutWorkoutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutWorkoutResponse> {
        const response = await this.putWorkoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
